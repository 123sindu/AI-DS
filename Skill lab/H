 #include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 1000 // Change this value based on the maximum number of nodes

int parent[MAX_NODES];
int rank[MAX_NODES];

// Function to initialize the DSU data structure
void initialize(int n) {
    for (int i = 1; i <= n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
}

// Function to find the representative of a set using path compression
int find(int x) {
    if (x != parent[x]) {
        parent[x] = find(parent[x]);
    }
    return parent[x];
}

// Function to perform union of two sets using rank to optimize the union operation
void unionSets(int x, int y) {
    int rootX = find(x);
    int rootY = find(y);

    if (rootX != rootY) {
        if (rank[rootX] < rank[rootY]) {
            parent[rootX] = rootY;
        } else if (rank[rootX] > rank[rootY]) {
            parent[rootY] = rootX;
        } else {
            parent[rootX] = rootY;
            rank[rootY]++;
        }
    }
}

int main() {
    int edges[][2] = {{1, 2}, {2, 3}, {4, 5}, {6, 7}, {5, 6}, {3, 7}};
    int numEdges = sizeof(edges) / sizeof(edges[0]);
    int maxNode = 7; // Assuming the maximum node value is 7

    initialize(maxNode);

    printf("Connected components:\n");

    for (int i = 0; i < numEdges; i++) {
        int u = edges[i][0];
        int v = edges[i][1];

        if (find(u) != find(v)) {
            printf("%d and %d are in different sets. Performing union.\n", u, v);
            unionSets(u, v);
        } else {
            printf("%d and %d are already in the same set. No union needed.\n", u, v);
        }
    }

    return 0;
}
       



#include <stdio.h>
#include <string.h>

#define MAX 100

int max(int a, int b) {
    return (a > b) ? a : b;
}

int lcs(char X[], char Y[]) {
    int m = strlen(X);
    int n = strlen(Y);

    int dp[MAX][MAX];

    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            if (i == 0 || j == 0)
                dp[i][j] = 0;
            else if (X[i - 1] == Y[j - 1])
                dp[i][j] = dp[i - 1][j - 1] + 1;
            else
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
        }
    }

    return dp[m][n];
}

int main() {
    char X[] = "ABCDGH";
    char Y[] = "AEDFHR";

    printf("Length of LCS is %d\n", lcs(X, Y));

    return 0;
}
[10/01, 9:13 am] +91 72044 64668: #include <stdio.h>

int fibBottomUp(int n) {
    int fibArray[n + 1];
    fibArray[0] = 0;
    fibArray[1] = 1;

    for (int i = 2; i <= n; i++)
        fibArray[i] = fibArray[i - 1] + fibArray[i - 2];

    return fibArray[n];
}

int main() {
    int n = 8;
    printf("Fibonacci(%d) using bottom-up approach = %d\n", n, fibBottomUp(n));

    return 0;
}






#include<stdio.h>
int fib(int n) {
    if (n <= 1)
        return n;
    else
        return fib(n - 1) + fib(n - 2);
}
int main() {
    int n = 8;
    printf("Fibonacci(%d) using recursion = %d\n", n, fib(n));
    return 0;
}
[10/01, 9:13 am] +91 72044 64668: #include <stdio.h>
#include <limits.h>

#define N 5

int matrixChainOrder(int p[], int n) {
    int m[N][N];

    // Initialize diagonal elements to 0
    for (int i = 1; i < n; i++)
        m[i][i] = 0;

    // Build the table in a bottom-up manner
    for (int L = 2; L < n; L++) {
        for (int i = 1; i < n - L + 1; i++) {
            int j = i + L - 1;
            m[i][j] = INT_MAX;

            for (int k = i; k <= j - 1; k++) {
                int q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];

                if (q < m[i][j])
                    m[i][j] = q;
            }
        }
    }

    return m[1][n - 1];
}

int main() {
    int arr[] = {5, 6, 4, 2, 3};
    int size = sizeof(arr) / sizeof(arr[0]);

    printf("Minimum number of multiplications is %d\n", matrixChainOrder(arr, size));

    return 0;
}
