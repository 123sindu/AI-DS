#include <stdio.h>
 #include <unistd.h> 
#include <stdlib.h> 

main(void) 
{ 
pid\_t pid = 0; 
pid = fork(); 
if (pid == 0)
 { 
printf("I am the child.\\n"); 
} if (pid > 0)
 { printf("I am the parent, the child is %d.\\n", pid); 
} 
if (pid < 0) 
{ 
perror("In fork():");
 } 
exit(0); 
} 



2) Wait
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

#include <sys/types.h>
#include <sys/wait.h>

main(void) {
        pid\_t pid = 0;
        int   status;

        pid = fork();
        if (pid == 0) {
                printf("I am the child.\\n");
                sleep(10);
                printf("I am the child, 10 seconds later.\\n");
        }
        if (pid > 0) {
                printf("I am the parent, the child is %d.\\n", pid);
                pid = wait(&status);
                printf("End of process %d: ", pid);
                if (WIFEXITED(status)) {
                        printf("The process ended with exit(%d).\\n", WEXITSTATUS(status));
                }
                if (WIFSIGNALED(status)) {
                        printf("The process ended with kill -%d.\\n", WTERMSIG(status));
                }
        }
        if (pid < 0) {
                perror("In fork():");
        }

        exit(0);
}


3) exec()

So while fork() makes processes, exec() loads programs into processes that already exist. In Code:

#include <stdio.h> 
#include <unistd.h> 
#include <stdlib.h> 
#include <sys/types.h> 
#include <sys/wait.h> 

main(void) 
{ pid\_t pid = 0;
 int status; pid = fork(); 
if (pid == 0)
 { 
printf("I am the child.\\n"); 
execl("/bin/ls", "ls", "-l", "/tmp/kris", (char \*) 0); 
perror("In exec(): "); 
} 
if (pid > 0) 
{ 
printf("I am the parent, and the child is %d.\\n", pid);
 pid = wait(&status);
 printf("End of process %d: ", pid);
 if (WIFEXITED(status)) 
{ printf("The process ended with exit(%d).\\n", WEXITSTATUS(status)); 
} 
if (WIFSIGNALED(status)) 
{ 
printf("The process ended with kill -%d.\\n", WTERMSIG(status)); } 
}
 if (pid < 0) 
{ 
perror("In fork():"); }
exit(0); } 

